package com.pratyakshkhurana.quizapp

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.activity.OnBackPressedCallback
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.pratyakshkhurana.quizapp.auth.AuthRepository
import com.pratyakshkhurana.quizapp.auth.LoginActivity
import com.pratyakshkhurana.quizapp.auth.ProfileActivity
import com.pratyakshkhurana.quizapp.auth.User
import com.pratyakshkhurana.quizapp.databinding.ActivityMainBinding
import kotlinx.coroutines.launch
import kotlin.random.Random

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding
    private lateinit var authRepository: AuthRepository
    private var userName: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        authRepository = AuthRepository()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        checkAndInitUserData()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–Ω–∞–∑–∞–¥"
                moveTaskToBack(true)
            }
        })

        binding.buttonStart.setOnClickListener {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏–º—è
            // –ò–Ω–∞—á–µ –±–µ—Ä–µ–º –∏–º—è –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
            val userNameToPass = userName ?: binding.enterNameEditText.text.toString()
            
            if (userNameToPass.isEmpty()) {
                Toast.makeText(this, "”®—Ç—ñ–Ω–µ–º—ñ–Ω, –∞—Ç—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑!", Toast.LENGTH_SHORT).show()
            } else {
                val intent = Intent(this, QuizCategories::class.java)
                intent.putExtra("user", userNameToPass)
                startActivity(intent)
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –∏—Å—Ç–æ—Ä–∏–∏
        binding.buttonHistory.setOnClickListener {
            val intent = Intent(this, HistoryActivity::class.java)
            startActivity(intent)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        binding.profileButton.setOnClickListener {
            val currentUser = authRepository.getCurrentUser()
            
            if (currentUser != null) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è
                val intent = Intent(this, ProfileActivity::class.java)
                startActivity(intent)
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
                val intent = Intent(this, LoginActivity::class.java)
                startActivity(intent)
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    private fun checkAndInitUserData() {
        val currentUser = authRepository.getCurrentUser()
        if (currentUser != null) {
            Log.d("MainActivity", "Checking user data for: ${currentUser.uid}")
            
            lifecycleScope.launch {
                try {
                    val initResult = authRepository.initUserInRealtimeDbIfNeeded()
                    initResult.fold(
                        onSuccess = {
                            Log.d("MainActivity", "User data initialized successfully")
                            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
                            getUserDataAndUpdateUI(currentUser.uid)
                        },
                        onFailure = { e ->
                            Log.e("MainActivity", "Failed to initialize user data", e)
                        }
                    )
                } catch (e: Exception) {
                    Log.e("MainActivity", "Exception during user data initialization", e)
                }
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     */
    private fun getUserDataAndUpdateUI(uid: String) {
        lifecycleScope.launch {
            try {
                val userDataResult = authRepository.getUserData(uid)
                userDataResult.fold(
                    onSuccess = { user ->
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        userName = user.name
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        updateUIForLoggedInUser(user)
                    },
                    onFailure = { e ->
                        Log.e("MainActivity", "Error getting user data", e)
                    }
                )
            } catch (e: Exception) {
                Log.e("MainActivity", "Exception while getting user data", e)
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private fun updateUIForLoggedInUser(user: User) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –∑–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        binding.enterNameEditText.visibility = View.GONE
        binding.enterNameTextView.visibility = View.GONE
        binding.nameInputLayout.visibility = View.GONE
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        val welcomeMessages = listOf(
            "üåü “ö–æ—à –∫–µ–ª–¥—ñ“£, –¥–∞–Ω—ã—à–ø–∞–Ω ${user.name}!",
            "üß† –ë—ñ–ª—ñ–º –∂–æ–ª—ã–Ω–¥–∞“ì—ã —Ç–∞“ì—ã –±—ñ—Ä —à–∞–π“õ–∞—Å –±–∞—Å—Ç–∞–ª–º–∞“õ!",
            "üéØ –ú–∞“õ—Å–∞—Ç ‚Äì 100%! –î–∞–π—ã–Ω—Å—ã“£ –±–∞, ${user.name}?"
        )
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        val randomMessage = welcomeMessages[Random.nextInt(welcomeMessages.size)]
        binding.welcomeTextView.text = randomMessage
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        binding.buttonStart.text = "–ë–ê–°–¢–ê–£"
    }
}

